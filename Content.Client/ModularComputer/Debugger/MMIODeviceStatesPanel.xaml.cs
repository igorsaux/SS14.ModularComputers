//-----------------------------------------------------------------------------
// Copyright 2024 Igor Spichkin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-----------------------------------------------------------------------------

using Content.Client.Message;
using Content.Shared.ModularComputer.Debugger;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.ModularComputer.Debugger;

[GenerateTypedNameReferences]
public sealed partial class MMIODeviceStatesPanel : BoxContainer
{
    private List<MmioDeviceState> _mmioStates = new();
    private int? _selectedMMIO;

    public MMIODeviceStatesPanel()
    {
        RobustXamlLoader.Load(this);
    }

    public void UpdateState(MotherboardState motherboardState)
    {
        if (_mmioStates.Count == motherboardState.MmioDeviceStates.Count)
            return;
        
        _mmioStates = motherboardState.MmioDeviceStates;

        MMIOList.RemoveAllChildren();
        
        if (_mmioStates.Count == 0)
        {
            _selectedMMIO = null;

            UpdateMMIOStatePanel();
            
            return;
        }

        foreach (var mmioState in _mmioStates)
        {
            var btn = new Button
            {
                Text = $"MMIO #{mmioState.Id}",
                HorizontalExpand = true,
                VerticalExpand = false,
                MaxHeight = 24
            };
            
            btn.OnPressed += _ => OnMMIOSelected(mmioState.Id);
            
            MMIOList.AddChild(btn);
        }
    }

    private void OnMMIOSelected(int handle)
    {
        _selectedMMIO = handle;
        UpdateMMIOStatePanel();
    }

    private void UpdateMMIOStatePanel()
    {
        if (_selectedMMIO is null || _mmioStates.Find(d => d.Id == _selectedMMIO) is not {} device)
        {
            NoSelectedMMIO.Visible = true;
            StateContainer.Visible = false;
            
            return;
        }

        NoSelectedMMIO.Visible = false;
        StateContainer.Visible = true;

        IdLabel.SetMarkup($"ID: [color=white]{device.Id}[/color]");
        LabelLabel.SetMarkup($"LABEL: [color=white]{device.Label}[/color]");
        AddrLabel.SetMarkup($"ADDR: [color=white]0x{device.Address:x8}[/color]");
        SizeLabel.SetMarkup($"SIZE: [color=white]0x{device.Size:x8}[/color]");
    }
}
